@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
	.av-visually-hidden {
		border: -0;
		clip-path: inset(50%);
		font-size: 1px;
		height: 0;
		left: 0;
		margin: 0;
		overflow: hidden;
		padding: 0;
		position: absolute;
		top: 0;
		white-space: nowrap;
		width: 0;
	}
}

@layer components {
	.av-text-input-wrapper {
		position: relative;
		display: flex;
		flex-direction: column;
	}
	.av-text-input-wrapper label {
		position: absolute;
		/* move the label inline */
		transform: translate(18px, 0) scale(1);
		transform-origin: top left;
		transition: all 0.2s ease-out;
	}

	/**
   * Focus is trapped at the input field level, and we
	 * want to move the label when this happens.
	 * We could use focus-within, but it would only help
	 * moving the label up. Next we need to move it back
	 * when the focus is lost, but only if there is not
	 * entered text. To achieve this, we use a trick with
	 * the placeholder. The placeholder is always set to
	 * " " (a space), and we use the :placeholder-shown
	 * pseudo-class to detect when the placeholder is
	 * shown. When it is not shown, we move the label
	 * back down.
	 * Therefore, instead of using focus-within on the label
	 * itself, we use +label on the input. It also means
	 * that in the DOM, the label must be placed after the
	 * input.
   */
	.av-text-input:focus + label,
	.av-text-input:not(:placeholder-shown) + label {
		/* move the label up */
		transform: translate(18px, -25px) scale(0.75);
	}

	.av-text-input-helper-text {
		position: absolute;
		transform: translate(18px, 30px) scale(0.75);
		transform-origin: top left;
		transition: all 0.2s ease-out;
	}

	.av-text-input__control--right {
		position: absolute;
		right: 18px;
	}
}
